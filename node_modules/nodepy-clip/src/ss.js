const { spawn } = require('child_process');
const path = require('path');
const os = require('os');

function getOS() {
    const platform = os.platform();
    switch (platform) {
      case 'darwin':
        return 'macOS';
      case 'win32':
        return 'Windows';
      case 'linux':
        return 'Linux';
      default:
        return 'Unknown';
    }
  }

function startClipboardMonitor(callback) {
  
  const currentOS = getOS();
  switch(currentOS){
    case "Windows":
       pythonExecutablePath = path.join(__dirname, 'app.exe');
       break
    case "Linux":
       pythonExecutablePath = path.join(__dirname, './app');
       exec('which xclip', (error, stdout, stderr) => {
        if (error || stderr) {
          console.log('Installing xclip...');
          exec('sudo apt-get update && sudo apt-get install -y xclip', (installError, installStdout, installStderr) => {
            if (installError || installStderr) {
              return callback(new Error(`Failed to install xclip: ${installError || installStderr}\n\n try to paste this command in your terminal sudo apt get install xclip`));
            }
          });
        } 
      });
       break
    case 'macOS':
       pythonExecutablePath = path.join(__dirname, './macapp');
      break
    case 'Unknown':
      callback(new Error(`Unknown OS error`));
      
  }
  const pythonProcess = spawn(pythonExecutablePath);

  pythonProcess.stdout.on('data', (data) => {
    const clipboardData = data.toString().trim();
    callback(null, clipboardData);
  });

  pythonProcess.stderr.on('data', (data) => {
    callback(new Error(`Python process error: ${data.toString()}`));
  });

  pythonProcess.on('close', (code) => {
    callback(new Error(`Python process exited with code ${code}`));
  });
}



// module.exports = { startClipboardMonitor };


const { exec } = require('child_process');

function copyToClipboard(text) {
  switch(getOS()){
    case "Windows": 
    exec(`echo ${text} | clip`, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error copying to clipboard: ${error.message}`);
        return;
      }
      console.log(`Text copied to clipboard: ${text}`);
    });
    break

    case "Linux":
      exec('which xclip', (error, stdout, stderr) => {
        if (error || stderr) {
          console.log('Installing xclip...');
          exec('sudo apt-get update && sudo apt-get install -y xclip', (installError, installStdout, installStderr) => {
            if (installError || installStderr) {
              return callback(new Error(`Failed to install xclip: ${installError || installStderr}\n\n try to paste this command in your terminal sudo apt get install xclip`));
            }
          });
        } 
      });

      exec(`echo "${text}" | xclip -selection clipboard`, (error, stdout, stderr) => {
        if (error) {
          console.error(`Error copying to clipboard: ${error.message}`);
          return;
        }
        console.log(`Text copied to clipboard: ${text}`);
      });
      break
 
    case "macOS":
    exec(`echo "${text}" | pbcopy`, (error, stdout, stderr) => {
      if (error) {
          console.error(`Error copying to clipboard: ${error.message}`);
          return;
        }
        console.log(`Text copied to clipboard: ${text}`);
      });
      break
}
}

module.exports = { startClipboardMonitor,copyToClipboard };





